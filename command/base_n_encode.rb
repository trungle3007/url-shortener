class BaseNEncode
  # Encodes any integer into a Base(n) string
  # In our case, n = 62 which is the length of English alphabet
  # The functions below are based on the following pseudocode:

  # digits = []
  # while num > 0
  #   remainder = modulo(num, 62)
  #   digits.push(remainder)
  #   num = divide(num, 62)

  # digits = digits.reverse

  # Generated by:
  # (('a'..'z').to_a + ('A'..'Z').to_a + (0..9).to_a).join
  ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.freeze

  # Decimal to Base62
  def encode(num)
    if num.zero?
      return ALPHABET[0]
    end

    str = ''
    length = ALPHABET.length

    while num > 0
      str << ALPHABET[num.modulo(length)]
      num /= length
    end

    str.reverse
  end

  # Base62 to Decimal
  def decode(str)
    num = 0
    length = ALPHABET.length

    str.each_char do |char|
      num = num * length + ALPHABET.index(char) if ALPHABET.index(char)
    end

    num
  end
end
